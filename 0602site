Sub ProcessSiteMilestoneUnicode()
    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim wbNew As Workbook
    Dim wsNew As Worksheet
    Dim filePath As Variant
    Dim savePath As Variant
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim currentDate As String
    Dim requiredColumns As Variant
    Dim fileName As String
    
    ' Define required columns
    requiredColumns = Array("Trial Code", "Country", "Site Name", "Site Status", _
                           "Total Completed - Actual", "Total Screen Failed - Actual", _
                           "Total Enrolled - Planned", "Total Enrolled - Actual", _
                           "Total Screened - Actual", "Total In Active Enrollment - Actual", _
                           "Total In Treatment - Actual")
    
    Application.ScreenUpdating = False
    
    ' File selection
    filePath = Application.GetOpenFilename( _
        FileFilter:="Excel Files (*.xls*), *.xls*", _
        Title:="Please select Site Milestone file")
    
    If filePath = False Then
        MsgBox "No file selected. Operation cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Open the selected file
    Set wbSource = Workbooks.Open(filePath)
    Set wsSource = wbSource.ActiveSheet
    
    ' Create new workbook
    Set wbNew = Workbooks.Add
    Set wsNew = wbNew.ActiveSheet
    wsNew.Name = "Cleaned_Data"
    
    ' Copy all data
    wsSource.UsedRange.Copy
    wsNew.Range("A1").PasteSpecial xlPasteAll
    Application.CutCopyMode = False
    
    ' CRITICAL: Clean all headers to remove ALL hidden characters including Unicode
    lastCol = wsNew.Cells(1, wsNew.Columns.Count).End(xlToLeft).Column
    For j = 1 To lastCol
        wsNew.Cells(1, j).Value = CleanUnicodeText(wsNew.Cells(1, j).Value)
    Next j
    
    ' Find and remove "Applied filters:" rows
    Dim trialCodeCol As Integer
    trialCodeCol = 0
    
    For j = 1 To lastCol
        If wsNew.Cells(1, j).Value = "Trial Code" Then
            trialCodeCol = j
            Exit For
        End If
    Next j
    
    If trialCodeCol > 0 Then
        lastRow = wsNew.Cells(wsNew.Rows.Count, trialCodeCol).End(xlUp).Row
        
        For i = lastRow To 2 Step -1
            If InStr(1, wsNew.Cells(i, trialCodeCol).Value, "Applied filters:", vbTextCompare) > 0 Then
                wsNew.Rows(i).Delete
            End If
        Next i
    End If
    
    ' Add current date column
    currentDate = Format(Date, "yyyy-mm-dd")
    wsNew.Columns(1).Insert Shift:=xlToRight
    wsNew.Cells(1, 1).Value = "cur_month"
    
    lastRow = wsNew.Cells(wsNew.Rows.Count, 2).End(xlUp).Row
    For i = 2 To lastRow
        wsNew.Cells(i, 1).Value = currentDate
    Next i
    
    ' Delete non-required columns
    Dim columnsToKeep As Variant
    ReDim columnsToKeep(0 To UBound(requiredColumns) + 1)
    columnsToKeep(0) = "cur_month"
    For i = 0 To UBound(requiredColumns)
        columnsToKeep(i + 1) = requiredColumns(i)
    Next i
    
    ' Track results
    Dim foundColumns As String
    Dim missingColumns As String
    foundColumns = "Found columns:" & vbCrLf
    missingColumns = ""
    
    ' Delete non-required columns (from right to left)
    For j = wsNew.Cells(1, wsNew.Columns.Count).End(xlToLeft).Column To 1 Step -1
        Dim keepColumn As Boolean
        keepColumn = False
        
        ' Check if this is a column to keep
        For i = 0 To UBound(columnsToKeep)
            If wsNew.Cells(1, j).Value = columnsToKeep(i) Then
                keepColumn = True
                Exit For
            End If
        Next i
        
        If Not keepColumn Then
            wsNew.Columns(j).Delete
        End If
    Next j
    
    ' Count final columns
    Dim finalColCount As Integer
    finalColCount = wsNew.Cells(1, wsNew.Columns.Count).End(xlToLeft).Column
    
    ' Auto-fit columns
    wsNew.Cells.EntireColumn.AutoFit
    
    ' Save file
    fileName = Mid(filePath, InStrRev(filePath, "\") + 1)
    fileName = Left(fileName, InStrRev(fileName, ".") - 1)
    
    savePath = Application.GetSaveAsFilename( _
        InitialFileName:=fileName & "_Cleaned_" & Format(Now, "yyyymmdd_hhmmss"), _
        FileFilter:="Excel Workbook (*.xlsx), *.xlsx", _
        Title:="Save cleaned file as...")
    
    If savePath <> False Then
        wbNew.SaveAs Filename:=savePath, FileFormat:=xlOpenXMLWorkbook
        MsgBox "Processing completed!" & vbCrLf & vbCrLf & _
               "Total columns in final file: " & finalColCount & vbCrLf & vbCrLf & _
               "Note: Unicode hidden characters (like zero-width spaces) have been removed.", _
               vbInformation, "Process Complete"
    End If
    
    wbSource.Close SaveChanges:=False
    Application.ScreenUpdating = True
    
End Sub

' Enhanced function to clean Unicode hidden characters
Function CleanUnicodeText(ByVal txt As String) As String
    Dim result As String
    Dim i As Long
    Dim charCode As Long
    
    result = ""
    
    ' Process each character
    For i = 1 To Len(txt)
        ' Get the Unicode value of the character
        charCode = AscW(Mid(txt, i, 1))
        
        ' Keep only visible characters
        Select Case charCode
            Case 9 ' Tab - replace with space
                result = result & " "
            Case 10, 13 ' Line breaks - skip
                ' Do nothing
            Case 32 To 126 ' Normal ASCII printable characters
                result = result & Mid(txt, i, 1)
            Case 160 ' Non-breaking space - replace with normal space
                result = result & " "
            Case 8203 ' Zero-width space (U+200B) - skip
                ' Do nothing - this is your problem character!
            Case 8204, 8205 ' Zero-width non-joiner/joiner - skip
                ' Do nothing
            Case 8206 To 8207 ' Left-to-right/right-to-left marks - skip
                ' Do nothing
            Case 8232, 8233 ' Line/paragraph separators - skip
                ' Do nothing
            Case 8234 To 8238 ' Directional formatting characters - skip
                ' Do nothing
            Case 8288 To 8303 ' Various Unicode spaces and formatting - skip
                ' Do nothing
            Case 65279 ' Zero-width no-break space (BOM) - skip
                ' Do nothing
            Case Is > 126 ' Other Unicode characters
                ' For other Unicode characters, keep if they're letters/numbers
                If charCode >= 192 And charCode <= 591 Then ' Extended Latin
                    result = result & Mid(txt, i, 1)
                ElseIf charCode >= 880 And charCode <= 1023 Then ' Greek
                    result = result & Mid(txt, i, 1)
                ElseIf charCode >= 1024 And charCode <= 1279 Then ' Cyrillic
                    result = result & Mid(txt, i, 1)
                ' Skip other Unicode ranges that might contain hidden characters
                End If
            Case Else
                ' Keep the character if not specifically excluded
                result = result & Mid(txt, i, 1)
        End Select
    Next i
    
    ' Clean up multiple spaces and trim
    result = Application.WorksheetFunction.Trim(result)
    
    CleanUnicodeText = result
End Function

' Diagnostic function to show Unicode characters
Sub ShowUnicodeCharacters()
    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim filePath As Variant
    Dim j As Long, i As Long
    Dim cellValue As String
    Dim msg As String
    
    filePath = Application.GetOpenFilename( _
        FileFilter:="Excel Files (*.xls*), *.xls*", _
        Title:="Please select Site Milestone file")
    
    If filePath = False Then Exit Sub
    
    Set wbSource = Workbooks.Open(filePath)
    Set wsSource = wbSource.ActiveSheet
    
    ' Check each header
    For j = 1 To wsSource.Cells(1, wsSource.Columns.Count).End(xlToLeft).Column
        cellValue = wsSource.Cells(1, j).Value
        msg = "Column " & j & ": " & vbCrLf
        
        ' Check for Unicode characters
        For i = 1 To Len(cellValue)
            Dim charCode As Long
            charCode = AscW(Mid(cellValue, i, 1))
            
            If charCode = 8203 Then
                msg = msg & "[ZERO-WIDTH SPACE U+200B found at position " & i & "]" & vbCrLf
            ElseIf charCode > 127 Or charCode < 32 Then
                msg = msg & "[Unicode/Hidden char " & charCode & " at position " & i & "]" & vbCrLf
            End If
        Next i
        
        ' Show if any special characters found
        If InStr(msg, "[") > 0 Then
            MsgBox msg & vbCrLf & "Header text: " & cellValue, vbInformation, "Unicode Characters Found"
        End If
    Next j
    
    wbSource.Close SaveChanges:=False
    MsgBox "Unicode character check complete!", vbInformation
End Sub
