Sub ProcessDataFile()
    Dim fd As FileDialog
    Dim selectedFile As String
    Dim sourceWB As Workbook
    Dim sourceWS As Worksheet
    Dim newWB As Workbook
    Dim newWS As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long
    Dim targetColumns As Variant
    Dim colHeaders As Variant
    Dim colIndexes As Variant
    Dim j As Integer
    Dim foundCol As Integer
    Dim newFileName As String
    Dim currentDate As String
    
    ' Define the columns we want to keep
    targetColumns = Array("Study Code", "Country Status", "Hub", "Country", _
                         "Global SSO Priority", "Global SSO Priority Type", "Country YTD New Pts")
    
    ' Step 1: File selection dialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Please select file"
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xlsx; *.xls; *.xlsm"
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            selectedFile = .SelectedItems(1)
        Else
            MsgBox "No file selected. Process cancelled."
            Exit Sub
        End If
    End With
    
    ' Open the selected file
    Application.ScreenUpdating = False
    Set sourceWB = Workbooks.Open(selectedFile)
    Set sourceWS = sourceWB.Sheets(1) ' Assuming data is in first sheet
    
    ' Step 2: Remove unwanted rows
    lastRow = sourceWS.Cells(sourceWS.Rows.Count, 1).End(xlUp).Row
    
    ' Loop through rows from bottom to top to avoid index shifting when deleting
    For i = lastRow To 1 Step -1
        If Not IsEmpty(sourceWS.Cells(i, 1).Value) Then
            If InStr(1, sourceWS.Cells(i, 1).Value, "Selections:", vbTextCompare) > 0 Or _
               InStr(1, sourceWS.Cells(i, 1).Value, "Title:", vbTextCompare) > 0 Or _
               InStr(1, sourceWS.Cells(i, 1).Value, "Subtitle:", vbTextCompare) > 0 Or _
               InStr(1, sourceWS.Cells(i, 1).Value, "Totals", vbTextCompare) > 0 Then
                sourceWS.Rows(i).Delete
            End If
        End If
    Next i
    
    ' Refresh last row after deletions
    lastRow = sourceWS.Cells(sourceWS.Rows.Count, 1).End(xlUp).Row
    lastCol = sourceWS.Cells(1, sourceWS.Columns.Count).End(xlToLeft).Column
    
    ' Step 3: Find column indexes for target columns
    ReDim colIndexes(UBound(targetColumns))
    
    ' Get headers from row 1
    For j = 0 To UBound(targetColumns)
        foundCol = 0
        For i = 1 To lastCol
            If Trim(sourceWS.Cells(1, i).Value) = targetColumns(j) Then
                foundCol = i
                Exit For
            End If
        Next i
        colIndexes(j) = foundCol
        
        If foundCol = 0 Then
            MsgBox "Column '" & targetColumns(j) & "' not found!"
        End If
    Next j
    
    ' Step 4: Create new workbook and copy selected data
    Set newWB = Workbooks.Add
    Set newWS = newWB.Sheets(1)
    
    ' Step 5: Add date column header first
    currentDate = Format(Date, "yyyy-mm-dd")
    newWS.Cells(1, 1).Value = "as_ofdate"
    
    ' Add other column headers
    For j = 0 To UBound(targetColumns)
        If colIndexes(j) > 0 Then
            newWS.Cells(1, j + 2).Value = targetColumns(j)
        End If
    Next j
    
    ' Copy data
    For i = 2 To lastRow
        ' Fill date column for each row
        newWS.Cells(i, 1).Value = currentDate
        
        ' Copy target column data
        For j = 0 To UBound(targetColumns)
            If colIndexes(j) > 0 Then
                newWS.Cells(i, j + 2).Value = sourceWS.Cells(i, colIndexes(j)).Value
            End If
        Next j
    Next i
    
    ' Auto-fit columns
    newWS.Columns.AutoFit
    
    ' Step 6: Save with specified naming convention
    newFileName = "Dataset for calculating YTD new pts " & Format(Now, "yyyymmdd_hhmmss")
    
    ' Get the directory of the source file for saving
    Dim savePath As String
    savePath = Left(selectedFile, InStrRev(selectedFile, "\")) & newFileName & ".xlsx"
    
    ' Save the new workbook
    newWB.SaveAs savePath
    
    ' Close source workbook without saving
    sourceWB.Close SaveChanges:=False
    
    Application.ScreenUpdating = True
    
    MsgBox "Data processing completed successfully!" & vbCrLf & _
           "New file saved as: " & newFileName & ".xlsx"
    
End Sub
