Sub ProcessDataFile()
    Dim sourceWorkbook As Workbook
    Dim sourceWorksheet As Worksheet
    Dim newWorkbook As Workbook
    Dim newWorksheet As Worksheet
    Dim fileDialog As FileDialog
    Dim selectedFile As String
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long
    Dim j As Long
    Dim rowsToDelete As String
    Dim targetColumns As Variant
    Dim colPositions As Variant
    Dim newFileName As String
    Dim currentDate As String
    Dim timestamp As String
    
    ' Step 1: File selection dialog
    Set fileDialog = Application.FileDialog(msoFileDialogFilePicker)
    With fileDialog
        .Title = "Please select file"
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xls*"
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            selectedFile = .SelectedItems(1)
        Else
            MsgBox "No file selected. Operation cancelled."
            Exit Sub
        End If
    End With
    
    ' Open the selected file
    Set sourceWorkbook = Workbooks.Open(selectedFile)
    Set sourceWorksheet = sourceWorkbook.ActiveSheet
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    ' Get the data range
    lastRow = sourceWorksheet.Cells(sourceWorksheet.Rows.Count, "A").End(xlUp).Row
    lastCol = sourceWorksheet.Cells(1, sourceWorksheet.Columns.Count).End(xlToLeft).Column
    
    ' Step 2: Remove rows containing specified values in column A
    Dim valuesToRemove As Variant
    valuesToRemove = Array("Selections:", "Title:", "Subtitle:", "Totals")
    
    ' Loop through rows from bottom to top to avoid index issues when deleting
    For i = lastRow To 1 Step -1
        Dim cellValue As String
        cellValue = Trim(sourceWorksheet.Cells(i, 1).Value)
        
        ' Check if the cell contains any of the values to remove
        For j = LBound(valuesToRemove) To UBound(valuesToRemove)
            If InStr(1, cellValue, valuesToRemove(j), vbTextCompare) > 0 Then
                sourceWorksheet.Rows(i).Delete
                Exit For
            End If
        Next j
    Next i
    
    ' Update last row after deletions
    lastRow = sourceWorksheet.Cells(sourceWorksheet.Rows.Count, "A").End(xlUp).Row
    
    ' Step 3: Define target columns to keep
    targetColumns = Array("Study Code", "Country Status", "Hub", "Country", _
                         "Global SSO Priority", "Global SSO Priority Type", _
                         "Country YTD New Pts")
    
    ' Find column positions for target columns
    ReDim colPositions(LBound(targetColumns) To UBound(targetColumns))
    
    For i = LBound(targetColumns) To UBound(targetColumns)
        colPositions(i) = 0
        For j = 1 To lastCol
            If Trim(sourceWorksheet.Cells(1, j).Value) = targetColumns(i) Then
                colPositions(i) = j
                Exit For
            End If
        Next j
        
        ' Check if column was found
        If colPositions(i) = 0 Then
            MsgBox "Column '" & targetColumns(i) & "' not found in the source file."
            sourceWorkbook.Close False
            Application.ScreenUpdating = True
            Application.DisplayAlerts = True
            Exit Sub
        End If
    Next i
    
    ' Create new workbook
    Set newWorkbook = Workbooks.Add
    Set newWorksheet = newWorkbook.ActiveSheet
    
    ' Step 4: Add as_ofdate column as the first column
    currentDate = Format(Date, "yyyy-mm-dd")
    newWorksheet.Cells(1, 1).Value = "as_ofdate"
    
    ' Fill the as_ofdate column with current date for all data rows
    For i = 2 To lastRow
        newWorksheet.Cells(i, 1).Value = currentDate
    Next i
    
    ' Copy target columns to new workbook (starting from column 2)
    For i = LBound(targetColumns) To UBound(targetColumns)
        ' Copy header
        newWorksheet.Cells(1, i + 2).Value = targetColumns(i)
        
        ' Copy data
        For j = 2 To lastRow
            newWorksheet.Cells(j, i + 2).Value = sourceWorksheet.Cells(j, colPositions(i)).Value
        Next j
    Next i
    
    ' Format the as_ofdate column
    newWorksheet.Columns(1).NumberFormat = "yyyy-mm-dd"
    
    ' Auto-fit columns
    newWorksheet.Columns.AutoFit
    
    ' Step 5: Save the new file with specified naming convention
    timestamp = Format(Now, "yyyymmdd_hhmmss")
    newFileName = "Dataset for calculating YTD new pts " & timestamp & ".xlsx"
    
    ' Get the directory of the source file to save in the same location
    Dim saveDirectory As String
    saveDirectory = sourceWorkbook.Path & "\"
    
    ' Save the new workbook
    newWorkbook.SaveAs Filename:=saveDirectory & newFileName, FileFormat:=xlOpenXMLWorkbook
    
    ' Close source workbook without saving
    sourceWorkbook.Close False
    
    ' Restore settings
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    ' Show completion message
    MsgBox "Data processing completed successfully!" & vbCrLf & _
           "New file saved as: " & newFileName & vbCrLf & _
           "Location: " & saveDirectory, vbInformation, "Process Complete"
    
End Sub
