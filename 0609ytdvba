Sub ProcessDataFile()
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim newWb As Workbook
    Dim newWs As Worksheet
    Dim filePath As Variant
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim colHeaders As Variant
    Dim foundCols() As Integer
    Dim colCount As Integer
    
    ' Step 1: File selection with instruction
    filePath = Application.GetOpenFilename( _
        FileFilter:="Excel Files (*.xls*), *.xls*", _
        Title:="Please select file")
    
    If filePath = False Then
        MsgBox "No file selected. Operation cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Open the selected file
    Set wb = Workbooks.Open(filePath)
    Set ws = wb.Sheets(1)
    
    ' Find last row and column
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    ' Step 2: Remove rows containing specific text
    Dim deleteTexts As Variant
    deleteTexts = Array("Selections:", "Title:", "Subtitle:")
    
    For i = lastRow To 1 Step -1
        For j = 1 To lastCol
            For Each txt In deleteTexts
                If InStr(1, ws.Cells(i, j).Value, txt, vbTextCompare) > 0 Then
                    ws.Rows(i).Delete
                    Exit For
                End If
            Next txt
        Next j
    Next i
    
    ' Update last row after deletions
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Step 3: Find columns to keep
    colHeaders = Array("Study Code", "Country Status", "Hub", "Country", _
                      "Global SSO Priority", "Global SSO Priority Type", "Country YTD New Pts")
    ReDim foundCols(0 To UBound(colHeaders))
    colCount = 0
    
    ' Find column positions
    For i = 0 To UBound(colHeaders)
        For j = 1 To lastCol
            If Trim(ws.Cells(1, j).Value) = colHeaders(i) Then
                foundCols(colCount) = j
                colCount = colCount + 1
                Exit For
            End If
        Next j
    Next i
    
    ' Create new workbook with selected columns
    Set newWb = Workbooks.Add
    Set newWs = newWb.Sheets(1)
    
    ' Step 5: Add as_ofdate column first
    newWs.Cells(1, 1).Value = "as_ofdate"
    
    ' Copy headers for selected columns
    For i = 0 To colCount - 1
        newWs.Cells(1, i + 2).Value = ws.Cells(1, foundCols(i)).Value
    Next i
    
    ' Copy data row by row, checking for "Totals" in Study Code column
    Dim newRow As Long
    Dim studyCodeCol As Integer
    newRow = 2
    
    ' Find Study Code column position in original data
    For j = 1 To lastCol
        If Trim(ws.Cells(1, j).Value) = "Study Code" Then
            studyCodeCol = j
            Exit For
        End If
    Next j
    
    ' Copy data excluding rows with "Totals" in Study Code
    For i = 2 To lastRow
        If studyCodeCol > 0 Then
            If InStr(1, ws.Cells(i, studyCodeCol).Value, "Totals", vbTextCompare) = 0 Then
                ' Add current date in first column
                newWs.Cells(newRow, 1).Value = Format(Date, "yyyy-mm-dd")
                
                ' Copy selected columns
                For j = 0 To colCount - 1
                    newWs.Cells(newRow, j + 2).Value = ws.Cells(i, foundCols(j)).Value
                Next j
                
                newRow = newRow + 1
            End If
        End If
    Next i
    
    ' Format the new worksheet
    With newWs
        .Columns.AutoFit
        .Rows(1).Font.Bold = True
    End With
    
    ' Step 6: Save the new file
    Dim savePath As String
    Dim fileName As String
    
    fileName = "Dataset for calculating YTD new pts " & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"
    savePath = Application.GetSaveAsFilename( _
        InitialFileName:=fileName, _
        FileFilter:="Excel Files (*.xlsx), *.xlsx", _
        Title:="Save cleaned data file")
    
    If savePath <> "False" Then
        Application.DisplayAlerts = False
        newWb.SaveAs Filename:=savePath, FileFormat:=xlOpenXMLWorkbook
        Application.DisplayAlerts = True
        MsgBox "File processed and saved successfully!", vbInformation
    Else
        MsgBox "Save cancelled. The cleaned data is still open.", vbInformation
    End If
    
    ' Close original file without saving
    wb.Close SaveChanges:=False
    
End Sub
