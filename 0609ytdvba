Sub ProcessDataFile()
    Dim fd As FileDialog
    Dim selectedFile As String
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long
    Dim j As Long
    Dim colHeaders As Variant
    Dim targetCols As Variant
    Dim colIndices As Variant
    Dim newWb As Workbook
    Dim newWs As Worksheet
    Dim currentDate As String
    Dim fileName As String
    Dim savePath As String
    
    ' Initialize target columns array
    targetCols = Array("Study Code", "Country Status", "Hub", "Country", _
                      "Global SSO Priority", "Global SSO Priority Type", "Country YTD New Pts")
    
    ' Step 1: File picker dialog with instruction
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Please select file"
        .AllowMultiSelect = False
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xlsx;*.xls;*.xlsm"
        .Filters.Add "All Files", "*.*"
    End With
    
    ' Show dialog and get selected file
    If fd.Show = -1 Then
        selectedFile = fd.SelectedItems(1)
    Else
        MsgBox "No file selected. Operation cancelled."
        Exit Sub
    End If
    
    ' Open the selected file
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Set wb = Workbooks.Open(selectedFile)
    Set ws = wb.Worksheets(1) ' Assuming data is in first sheet
    
    ' Find last row and column
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    ' Step 2: Remove rows containing "Selections:", "Title:", "Subtitle:" in column A
    For i = lastRow To 1 Step -1
        If InStr(1, ws.Cells(i, 1).Value, "Selections:", vbTextCompare) > 0 Or _
           InStr(1, ws.Cells(i, 1).Value, "Title:", vbTextCompare) > 0 Or _
           InStr(1, ws.Cells(i, 1).Value, "Subtitle:", vbTextCompare) > 0 Then
            ws.Rows(i).Delete
        End If
    Next i
    
    ' Update last row after deletion
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Step 3: Find target columns and their indices
    ReDim colIndices(0 To UBound(targetCols))
    
    ' Find header row (assuming it's row 1 after cleanup)
    For j = 1 To lastCol
        For i = 0 To UBound(targetCols)
            If Trim(ws.Cells(1, j).Value) = targetCols(i) Then
                colIndices(i) = j
                Exit For
            End If
        Next i
    Next j
    
    ' Check if all required columns were found
    For i = 0 To UBound(targetCols)
        If colIndices(i) = 0 Then
            MsgBox "Column '" & targetCols(i) & "' not found in the file."
            wb.Close False
            Exit Sub
        End If
    Next i
    
    ' Step 4: Remove rows containing "Totals" in Study Code column
    Dim studyCodeCol As Long
    studyCodeCol = colIndices(0) ' Study Code is first in our array
    
    For i = lastRow To 2 Step -1 ' Start from row 2 to preserve headers
        If InStr(1, ws.Cells(i, studyCodeCol).Value, "Totals", vbTextCompare) > 0 Then
            ws.Rows(i).Delete
        End If
    Next i
    
    ' Update last row after deletion
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Step 5 & 6: Create new workbook with cleaned data and date column
    Set newWb = Workbooks.Add
    Set newWs = newWb.Worksheets(1)
    
    ' Step 5: Add date column header and format date
    currentDate = Format(Date, "yyyy-mm-dd")
    newWs.Cells(1, 1).Value = "as_ofdate"
    
    ' Add target column headers starting from column 2
    For i = 0 To UBound(targetCols)
        newWs.Cells(1, i + 2).Value = targetCols(i)
    Next i
    
    ' Copy data rows
    For i = 2 To lastRow
        ' Add current date to first column
        newWs.Cells(i, 1).Value = currentDate
        
        ' Copy target column data
        For j = 0 To UBound(targetCols)
            newWs.Cells(i, j + 2).Value = ws.Cells(i, colIndices(j)).Value
        Next j
    Next i
    
    ' Auto-fit columns
    newWs.Columns.AutoFit
    
    ' Step 6: Save with specified filename
    fileName = "Dataset for calculating YTD new pts " & Format(Now, "yyyymmdd_hhmmss")
    savePath = Application.GetSaveAsFilename(fileName, "Excel Workbook (*.xlsx), *.xlsx")
    
    If savePath <> "False" Then
        newWb.SaveAs savePath
        MsgBox "File processed and saved successfully as: " & vbCrLf & savePath
    Else
        MsgBox "File processed but not saved (user cancelled save dialog)."
    End If
    
    ' Clean up
    wb.Close False
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    MsgBox "Data processing completed successfully!"
    
End Sub
