Sub ProcessExcelFile()
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim filePath As Variant
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim currentDate As String
    Dim columnsToKeep As Variant
    Dim tempCol As Long
    
    ' 1. File selection dialog
    filePath = Application.GetOpenFilename( _
        FileFilter:="Excel Files (*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", _
        Title:="Please select file", _
        MultiSelect:=False)
    
    ' Check if user cancelled
    If filePath = False Then
        MsgBox "No file selected. Operation cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Open the selected workbook
    Set wb = Workbooks.Open(filePath)
    Set ws = wb.Worksheets(1) ' Assuming data is in the first sheet
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    
    ' Find last row BEFORE inserting new column
    On Error Resume Next
    lastRow = ws.Cells.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
    On Error GoTo 0
    
    ' If Find method fails, use UsedRange
    If lastRow = 0 Then
        lastRow = ws.UsedRange.Rows.Count
    End If
    
    ' 2. Create current date and insert as first column
    currentDate = Format(Date, "yyyy-mm-dd")
    
    ' Insert new column at position A
    ws.Columns("A:A").Insert Shift:=xlToRight
    ws.Range("A1").Value = "as_of_date"
    
    ' Fill the date column
    For i = 2 To lastRow
        ws.Cells(i, 1).Value = currentDate
    Next i
    
    ' 3. Remove rows containing specific text
    Dim textsToRemove As Variant
    Dim txt As Variant
    textsToRemove = Array("Selections:", "Title:", "Subtitle:", "Totals")
    
    ' Loop through rows from bottom to top to avoid skipping rows
    For i = lastRow To 1 Step -1
        ' Skip header row
        If i = 1 Then GoTo NextRow
        
        ' Check all columns for text to remove
        For j = 1 To ws.Cells(i, ws.Columns.Count).End(xlToLeft).Column
            For Each txt In textsToRemove
                If InStr(1, ws.Cells(i, j).Value, txt, vbTextCompare) > 0 Then
                    ws.Rows(i).Delete
                    GoTo NextRow  ' Skip to next row after deletion
                End If
            Next txt
        Next j
NextRow:
    Next i
    
    ' CRITICAL: Recalculate lastRow after deletions for accurate data range
    lastRow = ws.Cells.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
    lastCol = ws.Cells.Find("*", SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
    
    ' 4. Select and keep only specified columns
    columnsToKeep = Array("as_of_date", "Study Code", "Country Status", "Hub", _
                         "Country", "Global SSO Priority", "Global SSO Priority Type", _
                         "Country YTD New Pts")
    
    ' Find column positions
    Dim colPositions() As Long
    ReDim colPositions(UBound(columnsToKeep))
    
    ' Initialize all positions to 0
    For i = 0 To UBound(columnsToKeep)
        colPositions(i) = 0
    Next i
    
    ' Find each column - with detailed checking
    Dim foundColumns As String
    foundColumns = "Found columns:" & vbCrLf
    
    For i = 0 To UBound(columnsToKeep)
        For j = 1 To lastCol
            ' Exact match comparison (trim both sides)
            If Trim(UCase(ws.Cells(1, j).Value)) = Trim(UCase(columnsToKeep(i))) Then
                colPositions(i) = j
                foundColumns = foundColumns & columnsToKeep(i) & " at column " & j & vbCrLf
                Exit For
            End If
        Next j
        If colPositions(i) = 0 Then
            foundColumns = foundColumns & columnsToKeep(i) & " NOT FOUND" & vbCrLf
        End If
    Next i
    
    ' Show what was found (comment out after testing)
    MsgBox foundColumns & vbCrLf & "Last row: " & lastRow
    
    ' Create a new sheet to store filtered columns
    Dim newWs As Worksheet
    Set newWs = wb.Worksheets.Add(After:=ws)
    newWs.Name = "Processed_Data"
    
    ' Copy selected columns to new sheet using a more robust method
    tempCol = 1
    For i = 0 To UBound(columnsToKeep)
        If colPositions(i) > 0 Then
            ' Method 1: Copy entire data range at once
            Dim copyRange As Range
            Set copyRange = ws.Range(ws.Cells(1, colPositions(i)), ws.Cells(lastRow, colPositions(i)))
            
            ' Copy to destination
            copyRange.Copy Destination:=newWs.Cells(1, tempCol)
            
            ' Verify the copy worked
            Dim copiedValues As Long
            copiedValues = Application.CountA(newWs.Range(newWs.Cells(2, tempCol), newWs.Cells(lastRow, tempCol)))
            
            ' If copy failed, try alternative method
            If copiedValues = 0 And Application.CountA(copyRange) > 1 Then
                ' Alternative: Copy values directly
                Dim r As Long
                For r = 1 To lastRow
                    newWs.Cells(r, tempCol).Value = ws.Cells(r, colPositions(i)).Value
                Next r
            End If
            
            tempCol = tempCol + 1
        Else
            ' If column not found, add empty column with header
            newWs.Cells(1, tempCol).Value = columnsToKeep(i)
            tempCol = tempCol + 1
        End If
    Next i
    
    ' Clear clipboard
    Application.CutCopyMode = False
    
    ' Verify what was copied
    Dim verifyMsg As String
    verifyMsg = "Verification of copied data:" & vbCrLf
    For i = 1 To tempCol - 1
        Dim colHeader As String
        Dim dataCount As Long
        colHeader = newWs.Cells(1, i).Value
        dataCount = Application.CountA(newWs.Range(newWs.Cells(2, i), newWs.Cells(lastRow, i)))
        verifyMsg = verifyMsg & "Column " & i & " (" & colHeader & "): " & dataCount & " values" & vbCrLf
    Next i
    MsgBox verifyMsg
    
    ' Delete original sheet (optional - comment out if you want to keep it for debugging)
    ' Application.DisplayAlerts = False
    ' ws.Delete
    ' Application.DisplayAlerts = True
    
    ' Auto-fit columns
    newWs.Columns.AutoFit
    
    ' Turn screen updating back on
    Application.ScreenUpdating = True
    
    MsgBox "File processing completed!", vbInformation
    
End Sub
