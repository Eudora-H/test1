Sub ProcessExcelFile()
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim filePath As Variant
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim currentDate As String
    Dim columnsToKeep As Variant
    Dim tempCol As Long
    
    ' 1. File selection dialog
    filePath = Application.GetOpenFilename( _
        FileFilter:="Excel Files (*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", _
        Title:="Please select file", _
        MultiSelect:=False)
    
    ' Check if user cancelled
    If filePath = False Then
        MsgBox "No file selected. Operation cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Open the selected workbook
    Set wb = Workbooks.Open(filePath)
    Set ws = wb.Worksheets(1) ' Assuming data is in the first sheet
    
    ' Turn off screen updating for better performance
    Application.ScreenUpdating = False
    
    ' DIAGNOSTIC 1: Check initial state
    Dim initialLastRow As Long
    initialLastRow = ws.UsedRange.Rows.Count
    MsgBox "Initial row count: " & initialLastRow & vbCrLf & _
           "First cell A1 value: " & ws.Range("A1").Value
    
    ' Find last row BEFORE inserting new column
    lastRow = initialLastRow
    
    ' 2. Create current date and insert as first column
    currentDate = Format(Date, "yyyy-mm-dd")
    MsgBox "Date to be inserted: " & currentDate
    
    ' Insert new column at position A
    ws.Columns("A:A").Insert Shift:=xlToRight
    ws.Range("A1").Value = "as_of_date"
    
    ' DIAGNOSTIC 2: Check after column insertion
    MsgBox "After column insertion:" & vbCrLf & _
           "A1 value: " & ws.Range("A1").Value & vbCrLf & _
           "B1 value: " & ws.Range("B1").Value
    
    ' Fill dates using multiple methods to ensure it works
    ' Method 1: Direct cell assignment with explicit formatting
    For i = 2 To lastRow
        ws.Cells(i, 1).Value = currentDate
        ws.Cells(i, 1).NumberFormat = "@" ' Text format to ensure visibility
    Next i
    
    ' DIAGNOSTIC 3: Check if dates were filled
    Dim sampleValues As String
    sampleValues = "Row 2, Col A: " & ws.Cells(2, 1).Value & vbCrLf & _
                   "Row 3, Col A: " & ws.Cells(3, 1).Value & vbCrLf & _
                   "Row 4, Col A: " & ws.Cells(4, 1).Value
    MsgBox "Sample values after filling dates:" & vbCrLf & sampleValues
    
    ' Force refresh
    ws.Calculate
    DoEvents
    
    ' 3. Remove rows containing specific text
    Dim textsToRemove As Variant
    textsToRemove = Array("Selections:", "Title:", "Subtitle:", "Totals")
    
    ' Count dates before row deletion
    Dim dateCountBefore As Long
    dateCountBefore = Application.CountA(ws.Range("A2:A" & lastRow))
    
    ' Update lastRow after filling dates
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Loop through rows from bottom to top to avoid skipping rows
    Dim txt As Variant
    Dim rowsDeleted As Long
    rowsDeleted = 0
    
    For i = lastRow To 1 Step -1
        For j = 1 To ws.Cells(i, ws.Columns.Count).End(xlToLeft).Column
            For Each txt In textsToRemove
                If InStr(1, ws.Cells(i, j).Value, txt, vbTextCompare) > 0 Then
                    ws.Rows(i).Delete
                    rowsDeleted = rowsDeleted + 1
                    Exit For
                End If
            Next txt
        Next j
    Next i
    
    ' DIAGNOSTIC 4: Check after row deletion
    Dim dateCountAfter As Long
    dateCountAfter = Application.CountA(ws.Range("A:A")) - 1 ' Subtract header
    MsgBox "Row deletion results:" & vbCrLf & _
           "Rows deleted: " & rowsDeleted & vbCrLf & _
           "Date count before deletion: " & dateCountBefore & vbCrLf & _
           "Date count after deletion: " & dateCountAfter
    
    ' 4. Select and keep only specified columns
    columnsToKeep = Array("as_of_date", "Study Code", "Country Status", "Hub", _
                         "Country", "Global SSO Priority", "Global SSO Priority Type", _
                         "Country YTD New Pts")
    
    ' Find column positions
    Dim colPositions() As Long
    ReDim colPositions(UBound(columnsToKeep))
    
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    ' DIAGNOSTIC 5: Show column headers
    Dim headerList As String
    headerList = ""
    For j = 1 To Application.Min(10, lastCol)
        headerList = headerList & "Col " & j & ": " & ws.Cells(1, j).Value & vbCrLf
    Next j
    MsgBox "First 10 column headers:" & vbCrLf & headerList
    
    For i = 0 To UBound(columnsToKeep)
        colPositions(i) = 0
        For j = 1 To lastCol
            If Trim(ws.Cells(1, j).Value) = columnsToKeep(i) Then
                colPositions(i) = j
                Exit For
            End If
        Next j
    Next i
    
    ' DIAGNOSTIC 6: Show which columns were found
    Dim foundCols As String
    foundCols = ""
    For i = 0 To UBound(columnsToKeep)
        foundCols = foundCols & columnsToKeep(i) & " at position: " & colPositions(i) & vbCrLf
    Next i
    MsgBox "Column positions found:" & vbCrLf & foundCols
    
    ' Create a new sheet to store filtered columns
    Dim newWs As Worksheet
    Set newWs = wb.Worksheets.Add(After:=ws)
    newWs.Name = "Processed_Data"
    
    ' Copy selected columns to new sheet
    tempCol = 1
    For i = 0 To UBound(columnsToKeep)
        If colPositions(i) > 0 Then
            ' DIAGNOSTIC: Check what we're copying
            If columnsToKeep(i) = "as_of_date" Then
                Dim nonBlankDates As Long
                nonBlankDates = Application.CountA(ws.Range(ws.Cells(2, colPositions(i)), ws.Cells(lastRow, colPositions(i))))
                MsgBox "Copying as_of_date column:" & vbCrLf & _
                       "Position: " & colPositions(i) & vbCrLf & _
                       "Non-blank dates: " & nonBlankDates & vbCrLf & _
                       "Sample value: " & ws.Cells(2, colPositions(i)).Value
            End If
            
            ws.Columns(colPositions(i)).Copy
            newWs.Columns(tempCol).PasteSpecial xlPasteAll
            tempCol = tempCol + 1
        Else
            ' If column not found, add empty column with header
            newWs.Cells(1, tempCol).Value = columnsToKeep(i)
            tempCol = tempCol + 1
        End If
    Next i
    
    ' Clear clipboard
    Application.CutCopyMode = False
    
    ' DIAGNOSTIC 7: Final check on new sheet
    Dim finalDateCount As Long
    finalDateCount = Application.CountA(newWs.Range("A2:A" & newWs.UsedRange.Rows.Count))
    MsgBox "Final check on Processed_Data sheet:" & vbCrLf & _
           "A1 value: " & newWs.Range("A1").Value & vbCrLf & _
           "A2 value: " & newWs.Range("A2").Value & vbCrLf & _
           "A3 value: " & newWs.Range("A3").Value & vbCrLf & _
           "Total non-blank dates: " & finalDateCount
    
    ' Don't delete original sheet for diagnostic purposes
    ' Application.DisplayAlerts = False
    ' ws.Delete
    ' Application.DisplayAlerts = True
    
    ' Auto-fit columns
    newWs.Columns.AutoFit
    
    ' Turn screen updating back on
    Application.ScreenUpdating = True
    
    MsgBox "Processing completed. Check both sheets to compare results.", vbInformation
    
End Sub
